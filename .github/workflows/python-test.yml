# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python tests

on:
  push:
    branches: [ master ]
    tags:
      - v*
  pull_request:
    branches: [ master ]

permissions: {}

jobs:
  tests:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install notmuch
      run: |
        sudo apt-get install notmuch
        sudo apt-get install libnotmuch-dev
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest ruff
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with ruff
      run: |
        # default set of ruff rules with GitHub Annotations
        # E501 Line too long
        # E741 Ambiguous variable name: `l`
        # F403 `from .gmailieer import *` used; unable to detect undefined names
        ruff --ignore=E501,E741,F403 --output-format=github --target-version=py39 .
    - name: Test with pytest
      run: |
        pytest -v tests

    - name: Build wheels
      run: |
        python setup.py sdist

    - name: Upload wheels
      if: matrix.python-version == '3.10'
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ tests ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: '3.10'
          miniforge-version: latest
          miniforge-variant: Mambaforge
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
